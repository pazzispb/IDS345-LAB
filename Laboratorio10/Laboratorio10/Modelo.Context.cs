//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Laboratorio10
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblSolicitante> tblSolicitantes { get; set; }
        public virtual DbSet<tblSolicitud> tblSolicituds { get; set; }
    
        public virtual int spInsertarSolicitante(string tipoDocumento, string documento, Nullable<System.DateTime> fNacimiento, string estado, string nombres, string apellidos, string direccion, string estadoCivil, string aprobadoEsposo)
        {
            var tipoDocumentoParameter = tipoDocumento != null ?
                new ObjectParameter("TipoDocumento", tipoDocumento) :
                new ObjectParameter("TipoDocumento", typeof(string));
    
            var documentoParameter = documento != null ?
                new ObjectParameter("Documento", documento) :
                new ObjectParameter("Documento", typeof(string));
    
            var fNacimientoParameter = fNacimiento.HasValue ?
                new ObjectParameter("FNacimiento", fNacimiento) :
                new ObjectParameter("FNacimiento", typeof(System.DateTime));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var estadoCivilParameter = estadoCivil != null ?
                new ObjectParameter("EstadoCivil", estadoCivil) :
                new ObjectParameter("EstadoCivil", typeof(string));
    
            var aprobadoEsposoParameter = aprobadoEsposo != null ?
                new ObjectParameter("AprobadoEsposo", aprobadoEsposo) :
                new ObjectParameter("AprobadoEsposo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarSolicitante", tipoDocumentoParameter, documentoParameter, fNacimientoParameter, estadoParameter, nombresParameter, apellidosParameter, direccionParameter, estadoCivilParameter, aprobadoEsposoParameter);
        }
    
        public virtual int spInsertarSolicitud(string tipoDocumento, string documento, string estado, string nivelAcademicoDonante, Nullable<decimal> estaturaDonante, Nullable<decimal> tamanoPiesDonante, string colorOjosDonante, string nacionalidadDonante, string descripcion, string edadPromedioDonante)
        {
            var tipoDocumentoParameter = tipoDocumento != null ?
                new ObjectParameter("TipoDocumento", tipoDocumento) :
                new ObjectParameter("TipoDocumento", typeof(string));
    
            var documentoParameter = documento != null ?
                new ObjectParameter("Documento", documento) :
                new ObjectParameter("Documento", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var nivelAcademicoDonanteParameter = nivelAcademicoDonante != null ?
                new ObjectParameter("NivelAcademicoDonante", nivelAcademicoDonante) :
                new ObjectParameter("NivelAcademicoDonante", typeof(string));
    
            var estaturaDonanteParameter = estaturaDonante.HasValue ?
                new ObjectParameter("EstaturaDonante", estaturaDonante) :
                new ObjectParameter("EstaturaDonante", typeof(decimal));
    
            var tamanoPiesDonanteParameter = tamanoPiesDonante.HasValue ?
                new ObjectParameter("TamanoPiesDonante", tamanoPiesDonante) :
                new ObjectParameter("TamanoPiesDonante", typeof(decimal));
    
            var colorOjosDonanteParameter = colorOjosDonante != null ?
                new ObjectParameter("ColorOjosDonante", colorOjosDonante) :
                new ObjectParameter("ColorOjosDonante", typeof(string));
    
            var nacionalidadDonanteParameter = nacionalidadDonante != null ?
                new ObjectParameter("NacionalidadDonante", nacionalidadDonante) :
                new ObjectParameter("NacionalidadDonante", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var edadPromedioDonanteParameter = edadPromedioDonante != null ?
                new ObjectParameter("EdadPromedioDonante", edadPromedioDonante) :
                new ObjectParameter("EdadPromedioDonante", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarSolicitud", tipoDocumentoParameter, documentoParameter, estadoParameter, nivelAcademicoDonanteParameter, estaturaDonanteParameter, tamanoPiesDonanteParameter, colorOjosDonanteParameter, nacionalidadDonanteParameter, descripcionParameter, edadPromedioDonanteParameter);
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Laboratorio6
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblIndicio> tblIndicios { get; set; }
        public virtual DbSet<tblVerdugo> tblVerdugoes { get; set; }
    
        public virtual int ppInsertarIndicios(Nullable<int> tipoDocumento, string documento, string descripcion)
        {
            var tipoDocumentoParameter = tipoDocumento.HasValue ?
                new ObjectParameter("TipoDocumento", tipoDocumento) :
                new ObjectParameter("TipoDocumento", typeof(int));
    
            var documentoParameter = documento != null ?
                new ObjectParameter("Documento", documento) :
                new ObjectParameter("Documento", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ppInsertarIndicios", tipoDocumentoParameter, documentoParameter, descripcionParameter);
        }
    
        public virtual int ppInsertVerdugo(Nullable<int> tipoDocumento, string documento, string nombres, string apellidos, Nullable<System.DateTime> fNacimiento, Nullable<System.DateTime> fEvento, Nullable<int> cantidadHijos, Nullable<bool> vivo, Nullable<bool> preso)
        {
            var tipoDocumentoParameter = tipoDocumento.HasValue ?
                new ObjectParameter("TipoDocumento", tipoDocumento) :
                new ObjectParameter("TipoDocumento", typeof(int));
    
            var documentoParameter = documento != null ?
                new ObjectParameter("Documento", documento) :
                new ObjectParameter("Documento", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var fNacimientoParameter = fNacimiento.HasValue ?
                new ObjectParameter("FNacimiento", fNacimiento) :
                new ObjectParameter("FNacimiento", typeof(System.DateTime));
    
            var fEventoParameter = fEvento.HasValue ?
                new ObjectParameter("FEvento", fEvento) :
                new ObjectParameter("FEvento", typeof(System.DateTime));
    
            var cantidadHijosParameter = cantidadHijos.HasValue ?
                new ObjectParameter("CantidadHijos", cantidadHijos) :
                new ObjectParameter("CantidadHijos", typeof(int));
    
            var vivoParameter = vivo.HasValue ?
                new ObjectParameter("Vivo", vivo) :
                new ObjectParameter("Vivo", typeof(bool));
    
            var presoParameter = preso.HasValue ?
                new ObjectParameter("Preso", preso) :
                new ObjectParameter("Preso", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ppInsertVerdugo", tipoDocumentoParameter, documentoParameter, nombresParameter, apellidosParameter, fNacimientoParameter, fEventoParameter, cantidadHijosParameter, vivoParameter, presoParameter);
        }
    }
}
